{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["softShadows","SpinningMesh","position","args","color","mesh","useRef","useFrame","current","rotation","x","y","castShadow","ref","attach","App","shadowMap","colorManagement","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-hight","shadow-camera-far","shadow-camera-right","shadow-camera-left","shadow-camera-top","shadow-camera-bottom","receiveShadow","Math","PI","opacity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAMAA,cACA,IAAMC,EAAe,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,MAC/BC,EAAOC,iBAAO,MAEpB,OADAC,aAAU,kBAAKF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OAEpE,0BAAMC,YAAU,EAACV,SAAUA,EAAUW,IAAOR,GAC1C,uCAAmBS,OAAO,WAAWX,KAAOA,IAC5C,0CAAsBW,OAAS,WAAUV,MAASA,MAkDvCW,MA7Cf,WAEE,OACE,oCACA,kBAAC,IAAD,CACEC,WAAS,EACTC,iBAAe,EACfC,OAAU,CAAChB,SAAU,EAAE,EAAE,EAAE,IAAKiB,IAAI,KACpC,kCAAcC,UAAa,KAC3B,sCACER,YAAU,EACVV,SAAW,CAAC,EAAE,GAAG,GACjBkB,UAAa,IACbC,uBAAsB,KACtBC,uBAAsB,KACtBC,oBAAqB,GACrBC,sBAAuB,GACvBC,sBAAuB,GACvBC,oBAAmB,GACnBC,wBAAuB,KAEzB,gCAAYzB,SAAY,EAAE,GAAG,GAAG,IAAKkB,UAAW,KAChD,gCAAYlB,SAAY,CAAC,GAAG,GAAI,GAAIkB,UAAW,MAE/C,+BACE,0BAAMQ,eAAa,EAACnB,SAAW,EAAEoB,KAAKC,GAAG,EAAE,EAAE,GAAI5B,SAAU,CAAC,GAAG,EAAE,IAC/D,yCAAqBY,OAAO,WAAWX,KAAM,CAAC,IAAI,OAClD,oCAAgBW,OAAO,WAAWiB,QAAS,OAS/C,kBAAC,EAAD,CAAc7B,SAAU,CAAC,EAAE,EAAE,GAAIC,KAAQ,CAAC,EAAE,EAAE,GAAIC,MAAQ,cAC1D,kBAAC,EAAD,CAAcF,SAAU,EAAE,EAAE,GAAG,GAAIE,MAAQ,SAC3C,kBAAC,EAAD,CAAcF,SAAU,CAAC,EAAE,GAAG,GAAIE,MAAQ,SAC1C,kBAAC,IAAD,SC7Cc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c8e177b.chunk.js","sourcesContent":["import React, {useRef} from 'react';\nimport './App.scss';\n\nimport {Canvas, useFrame} from \"react-three-fiber\";\nimport {softShadows, OrbitControls } from \"drei\";\n\nsoftShadows();\nconst SpinningMesh = ({position, args, color}) =>{\n  const mesh = useRef(null);\n  useFrame (()=>(mesh.current.rotation.x = mesh.current.rotation.y += 0.01))\n  return(\n  <mesh castShadow position={position} ref = {mesh}>\n    <boxBufferGeometry attach='geometry' args= {args}/>\n    <meshStandardMaterial attach = 'material'color = {color}/>\n  </mesh>\n  )\n}\n\nfunction App() {\n  \n  return (\n    <>\n    <Canvas \n      shadowMap\n      colorManagement \n      camera = {{position: [-5,2,10], fov:60}}>\n      <ambientLight intensity = {0.3} />\n      <directionalLight\n        castShadow\n        position= {[0,10,0]}\n        intensity = {1.5}\n        shadow-mapSize-width={1024}\n        shadow-mapSize-hight={1024}\n        shadow-camera-far = {50}\n        shadow-camera-right = {10}\n        shadow-camera-left = {-10}\n        shadow-camera-top={10}\n        shadow-camera-bottom={-10}\n      />\n      <pointLight position = {[-10,0,-20]} intensity={0.3} />\n      <pointLight position = {[0,-10, 0]} intensity={1.5} />\n\n      <group>\n        <mesh receiveShadow rotation= {[-Math.PI/2,0,0]} position={[0,-3,0]} >\n          <planeBufferGeometry attach='geometry' args={[100,100]} />\n          <shadowMaterial attach='material' opacity={0.3} />\n        </mesh>\n\n\n      </group>\n\n\n\n\n      <SpinningMesh position={[0,1,0]} args = {[3,2,1]} color = 'lightblue'/>\n      <SpinningMesh position={[-2,1,-5]} color = \"pink\"/>\n      <SpinningMesh position={[5,1,-2]} color = \"pink\"/>\n      <OrbitControls/>\n    </Canvas>\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}